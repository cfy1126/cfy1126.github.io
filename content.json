{"meta":{"title":"美好事物","subtitle":"","description":"知行合一","author":"LinkinCao","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2022-06-29T15:39:40.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2022-06-29T15:40:29.000Z","updated":"2022-07-19T10:49:36.247Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-06-29T15:37:20.000Z","updated":"2022-07-19T10:49:36.247Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"react后台管理项目四","slug":"react后台管理项目四","date":"2022-07-19T18:16:03.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/19/react后台管理项目四/","link":"","permalink":"http://example.com/2022/07/19/react%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E5%9B%9B/","excerpt":"","text":"简单空格：**&amp;nbsp** 请求：收集数据–&gt;发送请求–&gt;响应处理–&gt;提示用户 关于改变类组件状态： 替换原数组使用this.setState({roles}) 简洁 组件基于原本的状态去修改1this.setState(state =&gt; (&#123;roles: [...state.roles],role&#125;) react富文本插件：react-draft-wysiwyg 收集数据 form ref(父组件收集子组件的数据） 前台分页：一次性查出所有的数据 组件传值：不修改组件传入的数据状态，只修改自己的数据状态 12345678910this.auth = React.createRef()// 得到最新的menusconst menus = this.auth.current.getMenus()&lt;AuthForm role=&#123;role&#125; ref=&#123;this.auth&#125; /&gt;/** * 为父组件提供最新menus数据 * @returns */getMenus = () =&gt; this.state.checkedKeys 绑定事件：绑定事件传递参数的写法 ()&#x3D;&gt; this.deleteUser(user)","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"编程习惯","slug":"编程习惯","date":"2022-07-18T18:12:14.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/18/编程习惯/","link":"","permalink":"http://example.com/2022/07/18/%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF/","excerpt":"","text":"react项目： 组件状态 首先写自定义函数 生命周期函数（抽离出自定义函数） 数据引用","categories":[],"tags":[]},{"title":"api和sdk","slug":"api和sdk","date":"2022-07-18T17:33:48.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/18/api和sdk/","link":"","permalink":"http://example.com/2022/07/18/api%E5%92%8Csdk/","excerpt":"","text":"API是什么API全称 Application Programming Interface，应用程序接口。 可以通过我之前的回答了解一下如何通俗解释API。 一般是指一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。 通俗来讲API就是可以轻松实现和其他软件的交互。 举个栗子: 胖虎是一个程序猿，老板要求他写一个火车票查询的软件，胖虎想提高工作效率，于是在写火车票查询的代码中，引入了BinSTD平台的火车票查询的接口，这样子就可以轻松实现功能。 SDK是什么SDK全称software development kit，软件开发工具包。 一般都是一些软件工程师为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件时的开发工具的集合。 通俗来讲就是第三方服务商提供的实现产品软件某项功能的工具包。 再来举个栗子： 老板让胖虎来完成BinSTD网站上的业务功能，胖虎觉得开发周期长，不利于公司产品上线，偶然机会了解到了华为云平台上的相关功能，于是在基于华为云SDK下，通过编码调用华为云API,就可以访问华为云的资源和数据。 API和SDK的区别 API是一个函数，有其特定的功能；而SDK是一个很多功能函数的集合体，一个工具包。 API是数据接口，SDK相当于开发集成工具环境，要在SDK的环境下来调用API。 API接口对接过程中需要的环境需要自己提供，SDK不仅提供开发环境，还提供很多API。简单功能调用，API调用方便快捷；复杂功能调用，SDK功能齐全。 转载：链接","categories":[],"tags":[]},{"title":"react后台管理项目三","slug":"react后台管理项目三","date":"2022-07-15T22:53:46.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/15/react后台管理项目三/","link":"","permalink":"http://example.com/2022/07/15/react%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%B8%89/","excerpt":"","text":"引入文件： 只有js和jsx可以省略后缀 export default 暴露导入文件可以写任意名字 export default 暴露导入时不用写中括号 export 统一导出导入时需要写中括号 路由：为谁设置耳机路由，就在哪里配置 bug: 功能性 bug(报错） 异常 bug(不报错） 2. jsonp 解决 ajax 跨域的原理1). jsonp只能解决GET类型的ajax请求跨域问题 2). jsonp请求不是ajax请求, 而是一般的get请求 3). 基本原理 浏览器端: 动态生成&lt;script&gt;来请求后台接口(src就是接口的url) 定义好用于接收响应数据的函数(fn), 并将函数名通过请求参数提交给后台(如: callback=fn) 服务器端: 接收到请求处理产生结果数据后, 返回一个函数调用的js代码, 并将结果数据作为实参传入函数调用 浏览器端: 收到响应自动执行函数调用的js代码, 也就执行了提前定义好的回调函数, 并得到了需要的结果数据 find: 找到一个匹配的元素就返回这个元素，并且不再向下进行 类组件生命周期： 组件卸载之前清除定时器 _挂载阶段_：constructor—&gt;render—&gt;componentDidMount _更新阶段_：render—&gt;componentDidUpdate _卸载阶段_：componentWillUnmount css: 伪元素 透明 移动 定位 1234567891011121314151617.header-bottom-left &#123; width: 25%; text-align: center; font-size: 20px; position: relative; &amp;::after &#123; content: &#x27;&#x27;; right: 50%; top: 100%; transform: translateX(50%); position: absolute; border-top: 20px solid #fff; border-bottom: 20px solid transparent; border-left: 20px solid transparent; border-right: 20px solid transparent; &#125;&#125; 工具类： 格式化 date 对象： 1234567891011121314151617export function formateDate(time) &#123; if (!time) return &#x27;&#x27; let date = new Date(time) return ( date.getFullYear() + &#x27;-&#x27; + (date.getMonth() + 1) + &#x27;-&#x27; + date.getDate() + &#x27; &#x27; + date.getHours() + &#x27;:&#x27; + date.getMinutes() + &#x27;:&#x27; + date.getSeconds() )&#125; 组件： 按钮封装成a标签效果 1234567891011export default function LinkButton(props) &#123; return &lt;button &#123;...props&#125; className=&quot;link-button&quot;&gt;&lt;/button&gt;&#125;.link-button&#123;background-color: transparent;border: none;outline: none;color: #1da57a;cursor: pointer;&#125;","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"react后台管理项目二","slug":"react后台管理项目二","date":"2022-07-14T18:47:55.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/14/react后台管理项目二/","link":"","permalink":"http://example.com/2022/07/14/react%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%BA%8C/","excerpt":"","text":"重置样式： img标签引入图片方式： 高阶函数和高阶组件： 12345678910111213141516171819201. 高阶函数 1). 一类特别的函数 a. 接受函数类型的参数 b. 返回值是函数 2). 常见 a. 定时器: setTimeout()/setInterval() b. Promise: Promise(() =&gt; &#123;&#125;) then(value =&gt; &#123;&#125;, reason =&gt; &#123;&#125;) c. 数组遍历相关的方法: forEach()/filter()/map()/reduce()/find()/findIndex() d. 函数对象的bind() e. Form.create()() / getFieldDecorator()() 3). 高阶函数更新动态, 更加具有扩展性2. 高阶组件 1). 本质就是一个函数 2). 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性 3). 作用: 扩展组件的功能3. 高阶组件与高阶函数的关系 高阶组件是特别的高阶函数 接收一个组件函数, 返回是一个新的组件函数 登录表单处理： 收集数据 表单验证 表单格式： form-data raw binary x-www-form-urlencoded(纯文本表单) 暴露： export default {} 统一暴露 export 分别暴露 箭头函数：箭头函数返回不写大括号，如果要写一定要写return 跨域： jsonp 只能处理 GET 请求 cors 通过后端允许 代理 12345678910111213141516173). 解决ajax跨域请求问题(开发时) 办法: 配置代理 ==&gt; 只能解决开发环境 编码: package.json: proxy: &quot;http://localhost:5000&quot;4). 对代理的理解 1). 是什么? 具有特定功能的程序 2). 运行在哪? 前台应用端 只能在开发时使用 3). 作用? 解决开发时的ajax请求跨域问题 a. 监视并拦截请求(3000) b. 转发请求(4000) 4). 配置代理 告诉代理服务器一些信息: 比如转发的目标地址 开发环境: 前端工程师 生产环境: 后端工程师 路由跳转 事件回调函数路由跳转 this.prop.push() 和 this.prop.replace()区别 push 层级结构回退 replace 回退不替换 render()里跳转使用 持续登录：刷新不退出自动登录：关闭浏览器不退出","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"react后台管理项目一","slug":"react后台管理项目一","date":"2022-07-14T08:18:57.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/14/react后台管理项目一/","link":"","permalink":"http://example.com/2022/07/14/react%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%B8%80/","excerpt":"","text":"数据库启动：npm start 前端启动：npm start SPA：single page application 单页应用 multer 文件上传库 blueimp-md5 加密库 mongoose操作数据库 jsonp请求 api 请求(url、type、param) 响应（格式) mock数据 组件 components 非路由组件 pages 路由组件 组件名字大写不代表文件夹需要大写 路由 哈希路由和H5路由 路由映射 习惯：除了根组件，其它所有的组件都命名为jsx后缀","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"react中使用样式预处理less","slug":"react中使用样式预处理less","date":"2022-07-13T18:00:10.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/13/react中使用样式预处理less/","link":"","permalink":"http://example.com/2022/07/13/react%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%A0%B7%E5%BC%8F%E9%A2%84%E5%A4%84%E7%90%86less/","excerpt":"","text":"安装craco: yarn add @craco&#x2F;craco 安装craco-less：yarn add craco-less 创建craco.config.js： 1234567891011121314151617const CracoLessPlugin = require(&#x27;craco-less&#x27;);module.exports = &#123; plugins: [ &#123; plugin: CracoLessPlugin, options: &#123; lessLoaderOptions: &#123; lessOptions: &#123; modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#1DA57A&#x27; &#125;, javascriptEnabled: true, &#125;, &#125;, &#125;, &#125;, ],&#125;; antd自定义主题","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"vue后台管理系统","slug":"vue后台管理系统","date":"2022-07-13T10:13:21.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/13/vue后台管理系统/","link":"","permalink":"http://example.com/2022/07/13/vue%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"业务逻辑： 管理员新增角色 为角色指定可见菜单和操作权限 色分配到指定的用户 用户登录系统查看权限 演示博客： 转载 项目地址：转载 注意版本： 12345Node.js == v10.13.0Npm == 6.10.3Vue == 2.5.2vue-router == 3.0.1element-ui == ^2.12.0 导入数据库 MongoDB之数据的备份、还原、导出、导入等简单操作转载—最后一个方法 修改数据库名称 bug: ‘mongodump‘ 不是内部或外部命令，也不是可运行的程序 或批处理文件. 解决： 转载 运行项目 指定运行ip和端口","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"}]},{"title":"阿里巴巴图标库使用","slug":"阿里巴巴图标库使用","date":"2022-07-12T16:10:29.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/12/阿里巴巴图标库使用/","link":"","permalink":"http://example.com/2022/07/12/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%9B%BE%E6%A0%87%E5%BA%93%E4%BD%BF%E7%94%A8/","excerpt":"","text":"下载相关图标 导入和使用 注意路径匹配 获取项目图标的在线链接","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"补补css","slug":"补补css","date":"2022-07-12T08:25:58.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/12/补补css/","link":"","permalink":"http://example.com/2022/07/12/%E8%A1%A5%E8%A1%A5css/","excerpt":"","text":"外边距塌陷(margin collapsing) 只会发生在垂直方向上，不会发生在水平方向 父元素和子元素没有内容 父元素包裹子元素，且在同一方向上没有padding和border解决办法：在同一方向上设置padding和border 空元素 内联元素和行内块元素内联元素：宽高以及到顶部和底部的边距都不可以进行设置行内块元素：内容在一行，其它设置和块元素相同","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"ps小萌新","slug":"ps小萌新","date":"2022-07-11T11:06:37.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/11/ps小萌新/","link":"","permalink":"http://example.com/2022/07/11/ps%E5%B0%8F%E8%90%8C%E6%96%B0/","excerpt":"","text":"工具面板 添加文字T键 放大镜Z键（Alt切换） 抓手H键（移动画布） 常用新建工作区：导航器，画笔，字符 图层面板 混合模式：滤色（滤去深色） 文字立体感：可投影（图层样式） 图片裁剪 图像→画布大小【需要先解除锁定】：Ctrl+T【自动变换工具】选中图片，shift等比例缩放，Alt中心缩放 蒙版 图片合成：不破坏原始素材进行修改拖动→添加蒙版（细微修改：流量、不透明度）→画笔（黑透白不透） 校色新建调整图层→曲线（调节明暗）、色彩平衡【只影响下一张图片：创建剪切图层】 钢笔工具 抠图：不用选区和蒙版（蒙版抠图柔和不精确） 曲线：按住左键←直线（Alt：转换点工具&#x2F;一侧变换点击一端点） Ctrl：改变锚点位置 增加锚点：点击两点之间 减少锚点：点击一点 系统新建形状：Ctrl+Z退回，惦记着最后一个点连接 修片① 修复红眼：使用红眼修复工具（需选中整个眼睛） ② 污渍修复工具：可小地方修修改→就近取色 ③ 修复画笔工具：Alt+拾色（可任取色，且过渡更自然） ④ 仿制图章：Alt+拾色（任取色，过渡相对不是和和谐） ⑤ 修补工具: 去水印 补充 文字：选“平滑”消除锯齿，调整字体和间距 制作光晕：使用智能对象（智能对象：可无限期修改）新建图层→填充前景黑色→滤镜&#x2F;渲染&#x2F;光线混合模式：【滤色】裁剪：【先修改比例等默认值】画笔工具：【→缩小，】→放大（在英文非大写状态）【分开调色】：建立组（必须勾选此组有效）【剪影】：使用钢笔选中建立选区使用蒙板纯色填充之后→复制→在第一个图层添加图层样式“色彩叠加”→移动→→使用【渐变映射整体调整】 快捷键来个小结✔Ctrl+J：直接复制所选背景图片 ✔Ctrl+Z：撤回一步 ✔Ctrl+Alt+Z：后退多步（会有一定的步数限制），（貌似在新版本中该项与楼上合并） ✔Ctrl+±：放大或缩小图片 ✔Ctrl+0：直接使图片恢复至初始视图 ✔Ctrl+↑↓←→：小幅度移动所选择的图片 ✔Ctrl+T：进入自由变换，直接选中图片进行位置和大小调整 ✔P旁边的左右括号键（英文且未开大写）：缩放或扩大橡皮擦画笔大小，极大和极小时会变成一个加号，极小时加号中间有一个小点点 ✔Alt+Shift：以中心点为轴进行同比缩放 ✔Alt+delete：填充前景颜色（或者直接用油漆桶） ✔Ctrl_R：标尺工具 调整成功后，应当使用双击或者回车键进行确定，以便进行其他步骤的操作","categories":[],"tags":[{"name":"ps","slug":"ps","permalink":"http://example.com/tags/ps/"}]},{"title":"连个打印机","slug":"连个打印机","date":"2022-07-11T09:09:14.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/11/连个打印机/","link":"","permalink":"http://example.com/2022/07/11/%E8%BF%9E%E4%B8%AA%E6%89%93%E5%8D%B0%E6%9C%BA/","excerpt":"","text":"连接： 根据型号连接对应的打印机 关闭防火墙和杀毒软件 选择对应的型号和IP地址连接 开始打印！go! go! go!","categories":[],"tags":[{"name":"电脑","slug":"电脑","permalink":"http://example.com/tags/%E7%94%B5%E8%84%91/"}]},{"title":"新手剪辑发车了","slug":"新手剪辑发车了","date":"2022-07-10T08:26:10.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/10/新手剪辑发车了/","link":"","permalink":"http://example.com/2022/07/10/%E6%96%B0%E6%89%8B%E5%89%AA%E8%BE%91%E5%8F%91%E8%BD%A6%E4%BA%86/","excerpt":"","text":"关于软件布局 注意导入本地素材格式软件是否支持 素材区 时间线 画面调整区 关于时间线区域主轨道: 图片显示时间增加和缩短 视频只能缩短 其它轨道： 上层轨道覆盖下层轨道 拖拽可以往一个新轨道添加素材，点击加号只能往主轨道添加素材 没有选定分割素材轨道，默认分割主轨道 功能： 定格功能 在指定的某一帧停止几秒钟（本质是一张图片）视频 倒放 镜像（图片和视频均可） 关闭原声 只对主轨道的素材起作用 吸附功能 用于素材拼接 旋转 剪切 画面调整区 缩放、不透明度、美颜、混合模式（确保选中素材） 音频 先添加其它素材，再添加音频素材 拖拽放在任何位置，点击加号到指针位置 自动踩点 手动踩点 清空踩点 变速 声音变调（一般不打开） 动画 设置动画时常 调节 主要对亮度、对比度、饱和度（色彩调节） 文本 识别视频字幕 识别音乐字幕 通过素材的颜色区分素材 素材区 贴纸 左边入场的动画时长 右边出场的动画时长 特效 转场：加载两段素材之间 滤镜：导出前加滤镜 调节：不使用预设的滤镜，自己自定义调色","categories":[],"tags":[{"name":"剪辑","slug":"剪辑","permalink":"http://example.com/tags/%E5%89%AA%E8%BE%91/"}]},{"title":"有认真的学习标点符号","slug":"有认真的学习标点符号","date":"2022-07-09T22:47:22.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/09/有认真的学习标点符号/","link":"","permalink":"http://example.com/2022/07/09/%E6%9C%89%E8%AE%A4%E7%9C%9F%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"顿号：表示并列词语之间的停顿 逗号：表示一句话中间的停顿（可以有递进关系） 分号：表示并列关系分句之间的停顿(并列分句内部有了逗号，这并列分句间才能用分号)","categories":[],"tags":[]},{"title":"分辨率让我emmo","slug":"分辨率让我emmo","date":"2022-07-08T19:07:55.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/08/分辨率让我emmo/","link":"","permalink":"http://example.com/2022/07/08/%E5%88%86%E8%BE%A8%E7%8E%87%E8%AE%A9%E6%88%91emmo/","excerpt":"","text":"物理分辨率： 显示屏最高可显示的像素 分辨率：可调节改变 物理像素：设备像素点 逻辑像素（css像素）：iphone6举例；逻辑像素375px 物理像素750px 像素比（dpr: device pixel ratio) 计算公式：同一方向的物理像素&#x2F;css像素 dpr &#x3D; 2 表示1个css像素需要2*2个设备像素来绘制 缩放： 缩放逻辑像素 PPI(DPI): 每英寸像素点 感谢大神奉献：()[https://blog.csdn.net/qq_34115899/article/details/105566707]","categories":[],"tags":[{"name":"电脑","slug":"电脑","permalink":"http://example.com/tags/%E7%94%B5%E8%84%91/"}]},{"title":"我的垃圾电脑为啥可以播放4k视频？","slug":"我的垃圾电脑为啥可以播放4k视频？","date":"2022-07-08T18:02:27.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/08/我的垃圾电脑为啥可以播放4k视频？/","link":"","permalink":"http://example.com/2022/07/08/%E6%88%91%E7%9A%84%E5%9E%83%E5%9C%BE%E7%94%B5%E8%84%91%E4%B8%BA%E5%95%A5%E5%8F%AF%E4%BB%A5%E6%92%AD%E6%94%BE4k%E8%A7%86%E9%A2%91%EF%BC%9F/","excerpt":"","text":"最后以我个人的经验来看（再次强调以下都是基于互联网上各类传播的经验，与理论并不是那么紧密），播放设备与片源的分辨率差距在3倍大概是人眼能分辨的极限，比如一个720p的屏幕（常见垃圾笔记本），放4K仍然比放1080p有肉眼可见的提升，但是放8K比放4K就看不出来啥了，所以说分辨率高真的很有用！ 转载于: ()[https://www.bilibili.com/read/cv6233898/]html中空格汇总：()[https://www.jianshu.com/p/160e5cb0209c]","categories":[],"tags":[{"name":"电脑","slug":"电脑","permalink":"http://example.com/tags/%E7%94%B5%E8%84%91/"}]},{"title":"小程序实战项目-商城-首页","slug":"小程序实战项目-商城-首页","date":"2022-07-08T14:56:41.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/08/小程序实战项目-商城-首页/","link":"","permalink":"http://example.com/2022/07/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE-%E5%95%86%E5%9F%8E-%E9%A6%96%E9%A1%B5/","excerpt":"","text":"搜索栏广告位 轮播图组件属性 autoplay 自动播放 indicator-dots 图片圆点 circular 循环播放 菜单产品","categories":[],"tags":[{"name":"wechat","slug":"wechat","permalink":"http://example.com/tags/wechat/"}]},{"title":"flex布局","slug":"flex布局","date":"2022-07-08T10:42:53.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/08/flex布局/","link":"","permalink":"http://example.com/2022/07/08/flex%E5%B8%83%E5%B1%80/","excerpt":"","text":"用于父元素的属性 justify-content 主轴元素排列方式 center flex-start flex-end space-between space-around space-evenly 间隔均匀分布 align-items 交叉轴的元素排列方式 flex-direction 排列方式 flex-wrap 元素是否可换行 用于子元素的属性 flex-grow 占据盒子剩余空间 flex-grow: 1 flex-shrink 不换行是否可压缩 flex-shrink: 0 flex-basis 盒子初始值 flex 前三项的缩写 flex-grow: 1 等价于 flex: 1 align-self 覆盖父元素指定交叉轴的属性align-items order 指定元素的排列顺序；order越大排序越后 z-order 元素重叠时，值较大的会在上层显示","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"小程序云开发","slug":"小程序云开发","date":"2022-07-07T12:36:39.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/07/小程序云开发/","link":"","permalink":"http://example.com/2022/07/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91/","excerpt":"","text":"上传数据到云端12345678910111213141516171819// 初始化云端数据库const db = wx.cloud.database()const products = db.collection(&#x27;products&#x27;)Page(&#123; data: &#123;&#125;, onSubmit(event) &#123; //添加数据到云端 products .add(&#123; data: &#123; ...event.detail.value, &#125;, &#125;) .then((res) =&gt; &#123; console.log(res) &#125;) &#125;,&#125;) 从云端获取数据1234567891011121314151617// 初始化云端数据库const db = wx.cloud.database()const products = db.collection(&#x27;products&#x27;)Page(&#123; data: &#123; products: [], &#125;, onLoad() &#123; //从云端获取数据 products.get().then((res) =&gt; &#123; this.setData(&#123; products: res.data, &#125;) &#125;) &#125;,&#125;) 修改删除云数据12345678910111213141516171819202122232425262728293031323334353637383940414243// 初始化云端数据库const db = wx.cloud.database()const products = db.collection(&#x27;products&#x27;)Page(&#123; data: &#123; product: &#123;&#125;, &#125;, onLoad(options) &#123; // 获取导航传过来的值 let id = options.id products .doc(id) .get() .then((res) =&gt; &#123; this.setData(&#123; product: res.data, &#125;) &#125;) &#125;, update() &#123; //修改云端数据 products .doc(this.data.product._id) .update(&#123; data: &#123; price: 399, &#125;, &#125;) .then((res) =&gt; &#123; console.log(res) &#125;) &#125;, del() &#123; // 删除云端数据 products .doc(this.data.product._id) .remove() .then((res) =&gt; &#123; console.log(res) &#125;) &#125;,&#125;) 云函数上传并部署云函数需安装: npm install –save wx-server-sdk@latest 添加数据云函数： 123456789101112131415161718192021// 云函数入口文件const cloud = require(&#x27;wx-server-sdk&#x27;)cloud.init(&#123; // 指定环境 evn: &#x27;invoice-inhand-9g86mm1bfec63201&#x27;,&#125;)const db = cloud.database()// 云函数入口函数exports.main = async (event, context) =&gt; &#123; const wxContext = cloud.getWXContext() //指定云函数功能 return db.collection(&#x27;users&#x27;).add(&#123; data: &#123; name: event.name, pwd: event.pwd, _openid: wxContext.OPENID, &#125;, &#125;)&#125; 调用云函数： 12345678910111213141516Page(&#123; onLoad() &#123; // 调用云函数做添加操作 wx.cloud .callFunction(&#123; name: &#x27;addUser&#x27;, data: &#123; name: &#x27;Caofayou&#x27;, pwd: &#x27;123456&#x27;, &#125;, &#125;) .then((res) =&gt; &#123; console.log(res) &#125;) &#125;,&#125;) 登录 数据获取处理 非空校验和格式校验 错误提示 页面跳转 保存用户信息 处理用户数据： 登录成功和失败： 123456789101112131415161718192021222324users .where(&#123; name: username, pwd: pwd, &#125;) .get() .then((res) =&gt; &#123; // 登录成功 if (res.data[0] == null) &#123; this.setData(&#123; show: true, &#125;) return &#125; else &#123; //登录失败 this.setData(&#123; show: false, &#125;) app.appUser = res.data[0] wx.redirectTo(&#123; url: &#x27;../index/index&#x27;, &#125;) &#125; &#125;)","categories":[],"tags":[{"name":"wechat","slug":"wechat","permalink":"http://example.com/tags/wechat/"}]},{"title":"网页单位汇总","slug":"网页单位汇总","date":"2022-07-07T09:43:08.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/07/网页单位汇总/","link":"","permalink":"http://example.com/2022/07/07/%E7%BD%91%E9%A1%B5%E5%8D%95%E4%BD%8D%E6%B1%87%E6%80%BB/","excerpt":"","text":"em: 相对于父元素rem: 相对于根元素","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"}]},{"title":"前端下载图片","slug":"download-picture","date":"2022-07-06T22:39:56.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/06/download-picture/","link":"","permalink":"http://example.com/2022/07/06/download-picture/","excerpt":"","text":"前端下载api返回为图片格式 123456789101112131415161718192021const downloadDocument = async () =&gt; &#123; const res = await http.get(`$&#123;path&#125;?user_id=caofy@inhand.com.cn`, &#123; responseType: &#x27;blob&#x27;, &#125;) downFile(res.data, &#x27;download&#x27;)&#125;const downFile = (data, name) =&gt; &#123; if (!data) &#123; alert(&#x27;数据错误！&#x27;) return &#125; let BLOB = new Blob([data]) let url = window.URL.createObjectURL(BLOB) let link = document.createElement(&#x27;a&#x27;) link.style.display = &#x27;none&#x27; link.href = url link.setAttribute(&#x27;download&#x27;, name) document.body.appendChild(link) link.click()&#125;","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"}]},{"title":"react-pdf简单使用","slug":"React-PDF","date":"2022-07-06T22:27:14.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/06/React-PDF/","link":"","permalink":"http://example.com/2022/07/06/React-PDF/","excerpt":"","text":"参考demo: https://github.com/recoding-io/react-videos/tree/main/react-pdf-viewer 官方文档: https://projects.wojtekmaj.pl/react-pdf/","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]},{"title":"uppy简单使用","slug":"uppy","date":"2022-07-06T22:20:10.000Z","updated":"2022-07-19T10:49:36.239Z","comments":true,"path":"2022/07/06/uppy/","link":"","permalink":"http://example.com/2022/07/06/uppy/","excerpt":"","text":"参考demo: https://github.com/cfy1126/react-upload-uppy 官方文档: https://uppy.io/docs/","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"}]}],"categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://example.com/tags/react/"},{"name":"vue","slug":"vue","permalink":"http://example.com/tags/vue/"},{"name":"css","slug":"css","permalink":"http://example.com/tags/css/"},{"name":"ps","slug":"ps","permalink":"http://example.com/tags/ps/"},{"name":"电脑","slug":"电脑","permalink":"http://example.com/tags/%E7%94%B5%E8%84%91/"},{"name":"剪辑","slug":"剪辑","permalink":"http://example.com/tags/%E5%89%AA%E8%BE%91/"},{"name":"wechat","slug":"wechat","permalink":"http://example.com/tags/wechat/"},{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"}]}